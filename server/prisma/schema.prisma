// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
model Service {
  id               Int        @id @default(autoincrement())
  name             String     @unique
  tag              String     // e.g., "A", "B", "C" TODO: enforce single character and uppercase at app level it is impossible with sqlite
  avgServiceTime   Int       

  tickets          Ticket[]   
  counters         CounterService[]

  @@map("services")
}

<<<<<<< HEAD
model Counter {
  id          Int              @id @default(autoincrement())
  name        String           @unique 
  isActive    Boolean          @default(true)

  tickets     Ticket[]
  services    CounterService[]

  @@map("counters")
}

model CounterService {
  counterId   Int
  serviceId   Int

  counter     Counter  @relation(fields: [counterId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])

  @@id([counterId, serviceId])
  @@map("counter_services")
}

model Ticket {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  issuedAt    DateTime   @default(now())
  servedAt    DateTime?  
  status      TicketStatus @default(WAITING)

  serviceId   Int
  service     Service     @relation(fields: [serviceId], references: [id])

  counterId   Int?
  counter     Counter?    @relation(fields: [counterId], references: [id])

  @@map("tickets")
=======
model Office {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  createdAt DateTime @default(now())
}

//getTicket task 

model Service {
  id        Int      @id @default(autoincrement()) //global unique identifier for the db
  tag       String   @unique //unique service identifier code
  name      String   
  tickets   Ticket[]               //one service can have many tickets

  @@map("services")    //map to "services" table in the db
}

model Ticket {
  id           Int      @id @default(autoincrement())  //global unique identifier for the db
  code         String   @unique //unique ticket identifier code(visible to the user)
  service      Service  @relation(fields: [serviceId], references: [id])
  serviceId    Int
  status       TicketStatus @default(WAITING)
  calledAt     DateTime?
  servedAt     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tickets")   //map to "tickets" table in the db
>>>>>>> queue-implementation
}

enum TicketStatus {
  WAITING
<<<<<<< HEAD
  SERVING
  SERVED
}
=======
  CALLED
  SERVED
  COMPLETED
}

//end getTicket task
>>>>>>> queue-implementation
